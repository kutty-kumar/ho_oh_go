// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pikachu_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserOperationResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserOperationResponse, error)
	GetUserByExternalId(ctx context.Context, in *GetUserByExternalIdRequest, opts ...grpc.CallOption) (*UserOperationResponse, error)
	MultiGetUsersByExternalId(ctx context.Context, in *MultiGetUsersByExternalIdRequest, opts ...grpc.CallOption) (*MultiGetUsersResponse, error)
	CreateUserIdentity(ctx context.Context, in *CreateUserIdentityRequest, opts ...grpc.CallOption) (*CreateUserIdentityResponse, error)
	GetUserIdentities(ctx context.Context, in *GetUserIdentitiesRequest, opts ...grpc.CallOption) (*GetUserIdentitiesResponse, error)
	UpdateUserIdentity(ctx context.Context, in *UpdateUserIdentityRequest, opts ...grpc.CallOption) (*UpdateUserIdentityResponse, error)
	CreateUserAttribute(ctx context.Context, in *CreateUserAttributeRequest, opts ...grpc.CallOption) (*CreateUserAttributeResponse, error)
	UpdateUserAttribute(ctx context.Context, in *UpdateUserAttributeRequest, opts ...grpc.CallOption) (*UpdateUserAttributeResponse, error)
	GetUserAttributesByKey(ctx context.Context, in *GetUserAttributeByKeyRequest, opts ...grpc.CallOption) (*GetUserAttributeByKeyResponse, error)
	GetUserAttributes(ctx context.Context, in *GetUserAttributesRequest, opts ...grpc.CallOption) (*GetUserAttributesResponse, error)
	CreateUserAddress(ctx context.Context, in *CreateUserAddressRequest, opts ...grpc.CallOption) (*CreateUserAddressResponse, error)
	GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error)
	UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error)
	CreateUserRelation(ctx context.Context, in *LinkRelationRequest, opts ...grpc.CallOption) (*LinkRelationResponse, error)
	GetUserRelations(ctx context.Context, in *GetUserRelationsRequest, opts ...grpc.CallOption) (*GetUserRelationsResponse, error)
	DeleteUserRelation(ctx context.Context, in *UnlinkRelationRequest, opts ...grpc.CallOption) (*UnlinkRelationResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserOperationResponse, error) {
	out := new(UserOperationResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserOperationResponse, error) {
	out := new(UserOperationResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByExternalId(ctx context.Context, in *GetUserByExternalIdRequest, opts ...grpc.CallOption) (*UserOperationResponse, error) {
	out := new(UserOperationResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/GetUserByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) MultiGetUsersByExternalId(ctx context.Context, in *MultiGetUsersByExternalIdRequest, opts ...grpc.CallOption) (*MultiGetUsersResponse, error) {
	out := new(MultiGetUsersResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/MultiGetUsersByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserIdentity(ctx context.Context, in *CreateUserIdentityRequest, opts ...grpc.CallOption) (*CreateUserIdentityResponse, error) {
	out := new(CreateUserIdentityResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/CreateUserIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserIdentities(ctx context.Context, in *GetUserIdentitiesRequest, opts ...grpc.CallOption) (*GetUserIdentitiesResponse, error) {
	out := new(GetUserIdentitiesResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/GetUserIdentities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserIdentity(ctx context.Context, in *UpdateUserIdentityRequest, opts ...grpc.CallOption) (*UpdateUserIdentityResponse, error) {
	out := new(UpdateUserIdentityResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/UpdateUserIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserAttribute(ctx context.Context, in *CreateUserAttributeRequest, opts ...grpc.CallOption) (*CreateUserAttributeResponse, error) {
	out := new(CreateUserAttributeResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/CreateUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserAttribute(ctx context.Context, in *UpdateUserAttributeRequest, opts ...grpc.CallOption) (*UpdateUserAttributeResponse, error) {
	out := new(UpdateUserAttributeResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/UpdateUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAttributesByKey(ctx context.Context, in *GetUserAttributeByKeyRequest, opts ...grpc.CallOption) (*GetUserAttributeByKeyResponse, error) {
	out := new(GetUserAttributeByKeyResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/GetUserAttributesByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAttributes(ctx context.Context, in *GetUserAttributesRequest, opts ...grpc.CallOption) (*GetUserAttributesResponse, error) {
	out := new(GetUserAttributesResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/GetUserAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserAddress(ctx context.Context, in *CreateUserAddressRequest, opts ...grpc.CallOption) (*CreateUserAddressResponse, error) {
	out := new(CreateUserAddressResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/CreateUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error) {
	out := new(GetUserAddressesResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/GetUserAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error) {
	out := new(UpdateUserAddressResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/UpdateUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserRelation(ctx context.Context, in *LinkRelationRequest, opts ...grpc.CallOption) (*LinkRelationResponse, error) {
	out := new(LinkRelationResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/CreateUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserRelations(ctx context.Context, in *GetUserRelationsRequest, opts ...grpc.CallOption) (*GetUserRelationsResponse, error) {
	out := new(GetUserRelationsResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/GetUserRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserRelation(ctx context.Context, in *UnlinkRelationRequest, opts ...grpc.CallOption) (*UnlinkRelationResponse, error) {
	out := new(UnlinkRelationResponse)
	err := c.cc.Invoke(ctx, "/pikachu_v1.UserService/DeleteUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*UserOperationResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserOperationResponse, error)
	GetUserByExternalId(context.Context, *GetUserByExternalIdRequest) (*UserOperationResponse, error)
	MultiGetUsersByExternalId(context.Context, *MultiGetUsersByExternalIdRequest) (*MultiGetUsersResponse, error)
	CreateUserIdentity(context.Context, *CreateUserIdentityRequest) (*CreateUserIdentityResponse, error)
	GetUserIdentities(context.Context, *GetUserIdentitiesRequest) (*GetUserIdentitiesResponse, error)
	UpdateUserIdentity(context.Context, *UpdateUserIdentityRequest) (*UpdateUserIdentityResponse, error)
	CreateUserAttribute(context.Context, *CreateUserAttributeRequest) (*CreateUserAttributeResponse, error)
	UpdateUserAttribute(context.Context, *UpdateUserAttributeRequest) (*UpdateUserAttributeResponse, error)
	GetUserAttributesByKey(context.Context, *GetUserAttributeByKeyRequest) (*GetUserAttributeByKeyResponse, error)
	GetUserAttributes(context.Context, *GetUserAttributesRequest) (*GetUserAttributesResponse, error)
	CreateUserAddress(context.Context, *CreateUserAddressRequest) (*CreateUserAddressResponse, error)
	GetUserAddresses(context.Context, *GetUserAddressesRequest) (*GetUserAddressesResponse, error)
	UpdateUserAddress(context.Context, *UpdateUserAddressRequest) (*UpdateUserAddressResponse, error)
	CreateUserRelation(context.Context, *LinkRelationRequest) (*LinkRelationResponse, error)
	GetUserRelations(context.Context, *GetUserRelationsRequest) (*GetUserRelationsResponse, error)
	DeleteUserRelation(context.Context, *UnlinkRelationRequest) (*UnlinkRelationResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*UserOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserByExternalId(context.Context, *GetUserByExternalIdRequest) (*UserOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByExternalId not implemented")
}
func (UnimplementedUserServiceServer) MultiGetUsersByExternalId(context.Context, *MultiGetUsersByExternalIdRequest) (*MultiGetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetUsersByExternalId not implemented")
}
func (UnimplementedUserServiceServer) CreateUserIdentity(context.Context, *CreateUserIdentityRequest) (*CreateUserIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserIdentity not implemented")
}
func (UnimplementedUserServiceServer) GetUserIdentities(context.Context, *GetUserIdentitiesRequest) (*GetUserIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdentities not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserIdentity(context.Context, *UpdateUserIdentityRequest) (*UpdateUserIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIdentity not implemented")
}
func (UnimplementedUserServiceServer) CreateUserAttribute(context.Context, *CreateUserAttributeRequest) (*CreateUserAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAttribute not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserAttribute(context.Context, *UpdateUserAttributeRequest) (*UpdateUserAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAttribute not implemented")
}
func (UnimplementedUserServiceServer) GetUserAttributesByKey(context.Context, *GetUserAttributeByKeyRequest) (*GetUserAttributeByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAttributesByKey not implemented")
}
func (UnimplementedUserServiceServer) GetUserAttributes(context.Context, *GetUserAttributesRequest) (*GetUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAttributes not implemented")
}
func (UnimplementedUserServiceServer) CreateUserAddress(context.Context, *CreateUserAddressRequest) (*CreateUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAddress not implemented")
}
func (UnimplementedUserServiceServer) GetUserAddresses(context.Context, *GetUserAddressesRequest) (*GetUserAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddresses not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserAddress(context.Context, *UpdateUserAddressRequest) (*UpdateUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAddress not implemented")
}
func (UnimplementedUserServiceServer) CreateUserRelation(context.Context, *LinkRelationRequest) (*LinkRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRelation not implemented")
}
func (UnimplementedUserServiceServer) GetUserRelations(context.Context, *GetUserRelationsRequest) (*GetUserRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRelations not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserRelation(context.Context, *UnlinkRelationRequest) (*UnlinkRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRelation not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/GetUserByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByExternalId(ctx, req.(*GetUserByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_MultiGetUsersByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetUsersByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).MultiGetUsersByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/MultiGetUsersByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).MultiGetUsersByExternalId(ctx, req.(*MultiGetUsersByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/CreateUserIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserIdentity(ctx, req.(*CreateUserIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/GetUserIdentities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserIdentities(ctx, req.(*GetUserIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/UpdateUserIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserIdentity(ctx, req.(*UpdateUserIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/CreateUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserAttribute(ctx, req.(*CreateUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/UpdateUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserAttribute(ctx, req.(*UpdateUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserAttributesByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAttributeByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserAttributesByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/GetUserAttributesByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserAttributesByKey(ctx, req.(*GetUserAttributeByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/GetUserAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserAttributes(ctx, req.(*GetUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/CreateUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserAddress(ctx, req.(*CreateUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/GetUserAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserAddresses(ctx, req.(*GetUserAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/UpdateUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserAddress(ctx, req.(*UpdateUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/CreateUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserRelation(ctx, req.(*LinkRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/GetUserRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserRelations(ctx, req.(*GetUserRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pikachu_v1.UserService/DeleteUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserRelation(ctx, req.(*UnlinkRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pikachu_v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserByExternalId",
			Handler:    _UserService_GetUserByExternalId_Handler,
		},
		{
			MethodName: "MultiGetUsersByExternalId",
			Handler:    _UserService_MultiGetUsersByExternalId_Handler,
		},
		{
			MethodName: "CreateUserIdentity",
			Handler:    _UserService_CreateUserIdentity_Handler,
		},
		{
			MethodName: "GetUserIdentities",
			Handler:    _UserService_GetUserIdentities_Handler,
		},
		{
			MethodName: "UpdateUserIdentity",
			Handler:    _UserService_UpdateUserIdentity_Handler,
		},
		{
			MethodName: "CreateUserAttribute",
			Handler:    _UserService_CreateUserAttribute_Handler,
		},
		{
			MethodName: "UpdateUserAttribute",
			Handler:    _UserService_UpdateUserAttribute_Handler,
		},
		{
			MethodName: "GetUserAttributesByKey",
			Handler:    _UserService_GetUserAttributesByKey_Handler,
		},
		{
			MethodName: "GetUserAttributes",
			Handler:    _UserService_GetUserAttributes_Handler,
		},
		{
			MethodName: "CreateUserAddress",
			Handler:    _UserService_CreateUserAddress_Handler,
		},
		{
			MethodName: "GetUserAddresses",
			Handler:    _UserService_GetUserAddresses_Handler,
		},
		{
			MethodName: "UpdateUserAddress",
			Handler:    _UserService_UpdateUserAddress_Handler,
		},
		{
			MethodName: "CreateUserRelation",
			Handler:    _UserService_CreateUserRelation_Handler,
		},
		{
			MethodName: "GetUserRelations",
			Handler:    _UserService_GetUserRelations_Handler,
		},
		{
			MethodName: "DeleteUserRelation",
			Handler:    _UserService_DeleteUserRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pikachu_v1/pikachu.proto",
}
