// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ditto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrinterServiceClient is the client API for PrinterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrinterServiceClient interface {
	CreatePrinter(ctx context.Context, in *CreatePrinterRequest, opts ...grpc.CallOption) (*CreatePrinterResponse, error)
	UpdatePrinter(ctx context.Context, in *UpdatePrinterRequest, opts ...grpc.CallOption) (*UpdatePrinterResponse, error)
	GetPrinterByExternalId(ctx context.Context, in *GetPrinterByExternalIdRequest, opts ...grpc.CallOption) (*GetPrinterByExternalIdResponse, error)
	MultiGetPrintersByExternalId(ctx context.Context, in *MultiGetPrintersByExternalIdRequest, opts ...grpc.CallOption) (*MultiGetPrintersByExternalIdResponse, error)
	MultiGetPrintersForUser(ctx context.Context, in *NoOpRequest, opts ...grpc.CallOption) (*MultiGetPrintersByExternalIdResponse, error)
	DeletePrinter(ctx context.Context, in *DeletePrinterRequest, opts ...grpc.CallOption) (*UpdatePrinterResponse, error)
}

type printerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrinterServiceClient(cc grpc.ClientConnInterface) PrinterServiceClient {
	return &printerServiceClient{cc}
}

func (c *printerServiceClient) CreatePrinter(ctx context.Context, in *CreatePrinterRequest, opts ...grpc.CallOption) (*CreatePrinterResponse, error) {
	out := new(CreatePrinterResponse)
	err := c.cc.Invoke(ctx, "/ditto_v1.PrinterService/CreatePrinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) UpdatePrinter(ctx context.Context, in *UpdatePrinterRequest, opts ...grpc.CallOption) (*UpdatePrinterResponse, error) {
	out := new(UpdatePrinterResponse)
	err := c.cc.Invoke(ctx, "/ditto_v1.PrinterService/UpdatePrinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) GetPrinterByExternalId(ctx context.Context, in *GetPrinterByExternalIdRequest, opts ...grpc.CallOption) (*GetPrinterByExternalIdResponse, error) {
	out := new(GetPrinterByExternalIdResponse)
	err := c.cc.Invoke(ctx, "/ditto_v1.PrinterService/GetPrinterByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) MultiGetPrintersByExternalId(ctx context.Context, in *MultiGetPrintersByExternalIdRequest, opts ...grpc.CallOption) (*MultiGetPrintersByExternalIdResponse, error) {
	out := new(MultiGetPrintersByExternalIdResponse)
	err := c.cc.Invoke(ctx, "/ditto_v1.PrinterService/MultiGetPrintersByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) MultiGetPrintersForUser(ctx context.Context, in *NoOpRequest, opts ...grpc.CallOption) (*MultiGetPrintersByExternalIdResponse, error) {
	out := new(MultiGetPrintersByExternalIdResponse)
	err := c.cc.Invoke(ctx, "/ditto_v1.PrinterService/MultiGetPrintersForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) DeletePrinter(ctx context.Context, in *DeletePrinterRequest, opts ...grpc.CallOption) (*UpdatePrinterResponse, error) {
	out := new(UpdatePrinterResponse)
	err := c.cc.Invoke(ctx, "/ditto_v1.PrinterService/DeletePrinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrinterServiceServer is the server API for PrinterService service.
// All implementations must embed UnimplementedPrinterServiceServer
// for forward compatibility
type PrinterServiceServer interface {
	CreatePrinter(context.Context, *CreatePrinterRequest) (*CreatePrinterResponse, error)
	UpdatePrinter(context.Context, *UpdatePrinterRequest) (*UpdatePrinterResponse, error)
	GetPrinterByExternalId(context.Context, *GetPrinterByExternalIdRequest) (*GetPrinterByExternalIdResponse, error)
	MultiGetPrintersByExternalId(context.Context, *MultiGetPrintersByExternalIdRequest) (*MultiGetPrintersByExternalIdResponse, error)
	MultiGetPrintersForUser(context.Context, *NoOpRequest) (*MultiGetPrintersByExternalIdResponse, error)
	DeletePrinter(context.Context, *DeletePrinterRequest) (*UpdatePrinterResponse, error)
	mustEmbedUnimplementedPrinterServiceServer()
}

// UnimplementedPrinterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrinterServiceServer struct {
}

func (UnimplementedPrinterServiceServer) CreatePrinter(context.Context, *CreatePrinterRequest) (*CreatePrinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrinter not implemented")
}
func (UnimplementedPrinterServiceServer) UpdatePrinter(context.Context, *UpdatePrinterRequest) (*UpdatePrinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrinter not implemented")
}
func (UnimplementedPrinterServiceServer) GetPrinterByExternalId(context.Context, *GetPrinterByExternalIdRequest) (*GetPrinterByExternalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrinterByExternalId not implemented")
}
func (UnimplementedPrinterServiceServer) MultiGetPrintersByExternalId(context.Context, *MultiGetPrintersByExternalIdRequest) (*MultiGetPrintersByExternalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetPrintersByExternalId not implemented")
}
func (UnimplementedPrinterServiceServer) MultiGetPrintersForUser(context.Context, *NoOpRequest) (*MultiGetPrintersByExternalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetPrintersForUser not implemented")
}
func (UnimplementedPrinterServiceServer) DeletePrinter(context.Context, *DeletePrinterRequest) (*UpdatePrinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrinter not implemented")
}
func (UnimplementedPrinterServiceServer) mustEmbedUnimplementedPrinterServiceServer() {}

// UnsafePrinterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrinterServiceServer will
// result in compilation errors.
type UnsafePrinterServiceServer interface {
	mustEmbedUnimplementedPrinterServiceServer()
}

func RegisterPrinterServiceServer(s grpc.ServiceRegistrar, srv PrinterServiceServer) {
	s.RegisterService(&PrinterService_ServiceDesc, srv)
}

func _PrinterService_CreatePrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrinterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).CreatePrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ditto_v1.PrinterService/CreatePrinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).CreatePrinter(ctx, req.(*CreatePrinterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_UpdatePrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrinterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).UpdatePrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ditto_v1.PrinterService/UpdatePrinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).UpdatePrinter(ctx, req.(*UpdatePrinterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_GetPrinterByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrinterByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).GetPrinterByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ditto_v1.PrinterService/GetPrinterByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).GetPrinterByExternalId(ctx, req.(*GetPrinterByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_MultiGetPrintersByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetPrintersByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).MultiGetPrintersByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ditto_v1.PrinterService/MultiGetPrintersByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).MultiGetPrintersByExternalId(ctx, req.(*MultiGetPrintersByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_MultiGetPrintersForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).MultiGetPrintersForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ditto_v1.PrinterService/MultiGetPrintersForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).MultiGetPrintersForUser(ctx, req.(*NoOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_DeletePrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrinterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).DeletePrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ditto_v1.PrinterService/DeletePrinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).DeletePrinter(ctx, req.(*DeletePrinterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrinterService_ServiceDesc is the grpc.ServiceDesc for PrinterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrinterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ditto_v1.PrinterService",
	HandlerType: (*PrinterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrinter",
			Handler:    _PrinterService_CreatePrinter_Handler,
		},
		{
			MethodName: "UpdatePrinter",
			Handler:    _PrinterService_UpdatePrinter_Handler,
		},
		{
			MethodName: "GetPrinterByExternalId",
			Handler:    _PrinterService_GetPrinterByExternalId_Handler,
		},
		{
			MethodName: "MultiGetPrintersByExternalId",
			Handler:    _PrinterService_MultiGetPrintersByExternalId_Handler,
		},
		{
			MethodName: "MultiGetPrintersForUser",
			Handler:    _PrinterService_MultiGetPrintersForUser_Handler,
		},
		{
			MethodName: "DeletePrinter",
			Handler:    _PrinterService_DeletePrinter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ditto_v1/ditto.proto",
}
